-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;

--Create & insert to interests table

CREATE TABLE IF NOT EXISTS public.interests
(
    interest_id bigserial NOT NULL,
    interest character varying(20) NOT NULL,
    PRIMARY KEY (interest_id)
);

INSERT INTO interests (interest_id, interest)
VALUES('1','Reading'),
       ('2','Touring'),
       ('3','Movies'),
       ('4','Music'),
       ('5','Cooking'),
       ('6','Sports'),
       ('7','Excercise');
       
SELECT * FROM interests;  

--Create & insert to seeking table

CREATE TABLE IF NOT EXISTS public.seeking
(
    seeking_id bigserial NOT NULL,
    seeking character varying(20) NOT NULL,
    PRIMARY KEY (seeking_id)
);

INSERT INTO seeking (seeking_id,seeking)
VALUES ('1','male'),
       ('2','female'),
       ('3','friendship');
       
SELECT * FROM seeking;

--Create & insert to contact_seeking table

CREATE TABLE IF NOT EXISTS public.contact_seeking
(
    contact_id bigint NOT NULL,
    seeking_id bigint NOT NULL
);

INSERT INTO contact_seeking (contact_id,seeking_id)
VALUES ('1','3'),
       ('2','1'),
       ('2','3'),
       ('3','2'),
       ('4','1'),
       ('5','3');
       
SELECT * FROM contact_seeking;

--Create & insert to contact_interest table 

CREATE TABLE IF NOT EXISTS public.contact_interest
(
    contact_id bigint NOT NULL,
    interest_id bigint NOT NULL
);

INSERT INTO contact_interest (contact_id,interest_id)
VALUES ('1','3'),
        ('1','5'),
        ('3','3'),
        ('2','5'),
        ('4','1'),
        ('5','1');

SELECT * FROM contact_interest;

--Create & insert to my_contacts table

CREATE TABLE IF NOT EXISTS public.my_contacts
(
    contact_id bigserial NOT NULL,
    last_name character varying(20) NOT NULL,
    first_name character varying(20) NOT NULL,
    phone bigint NOT NULL,
    email character varying(30),
    gender character varying(10) NOT NULL,
    birtday character varying(20) NOT NULL,
    prof_id bigint NOT NULL,
    zip_code bigint NOT NULL,
    status_id bigint NOT NULL,
    PRIMARY KEY (contact_id)
);

INSERT INTO my_contacts (contact_id,last_name,first_name,phone,email,gender,birtday,prof_id,zip_code,status_id)
VALUES ('1','Lo','Frans','0829658989','frans@mail.com','Male','1987/07/23','1','1924','1'),
       ('2','Bee','Bel','0832562255','bel@mail.com','Female','1988/06/10','2','1925','2'),
       ('3','Mole','Mike','0824587876','mike@mail.com','Male','1989/05/7','3','1926','3'),
       ('4','Jean','Billy','0874564545','billy@mail.com','Male','1999/05/6','4','1927','1'),
       ('5','Bow','Sean','0875692312','sean@mail.com','Male','1979/03/19','1','1928','4');

SELECT * FROM my_contacts;


--Create & insert into profession table

CREATE TABLE IF NOT EXISTS public.profession
(
    prof_id bigserial NOT NULL,
    profession character varying(20) NOT NULL,
    PRIMARY KEY (prof_id)
);

INSERT INTO profession (prof_id,profession)
VALUES ('1','Teaching'),
       ('2','Developer'),
       ('3','IT'),
       ('4','Lawyer'),
       ('5','Docter'),
       ('6','Builder'),
       ('7','Mechanic');

SELECT * FROM profession;

--Create & insert into zip_code table

CREATE TABLE IF NOT EXISTS public.zip_code
(
    zip_code bigint NOT NULL,
    city character varying(30) NOT NULL,
    state character varying(30) NOT NULL,
    PRIMARY KEY (zip_code)
);

INSERT INTO zip_code (zip_code,city,state)
VALUES ('1924','JHB','Gauteng'),
       ('1925','Sasolburg','Freestate'),
       ('1926','Pretoria','Gauteng'),
       ('1927','Vereeniging','Gauteng'),
       ('1928','Deneysville','Freestate');
       
SELECT * FROM zip_code;

--Create & insert into status table

CREATE TABLE IF NOT EXISTS public.status
(
    status_id bigint NOT NULL,
    status character varying(30) NOT NULL,
    PRIMARY KEY (status_id)
);

INSERT INTO status (status_id,status)
VALUES ('1','single'),
       ('2','devorced'),
       ('3','complicated'),
       ('4','Widowed');

SELECT * FROM status;

ALTER TABLE IF EXISTS public.contact_seeking
    ADD FOREIGN KEY (contact_id)
    REFERENCES public.my_contacts (contact_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.contact_seeking
    ADD FOREIGN KEY (seeking_id)
    REFERENCES public.seeking (seeking_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.contact_interest
    ADD FOREIGN KEY (interest_id)
    REFERENCES public.interests (interest_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.contact_interest
    ADD FOREIGN KEY (contact_id)
    REFERENCES public.my_contacts (contact_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.my_contacts
    ADD FOREIGN KEY (prof_id)
    REFERENCES public.profession (prof_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.my_contacts
    ADD FOREIGN KEY (zip_code)
    REFERENCES public.zip_code (zip_code) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.my_contacts
    ADD FOREIGN KEY (status_id)
    REFERENCES public.status (status_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
    
    SELECT
    mc.last_name,
    mc.first_name,
    mc.phone,
    mc.email,
    mc.gender,
    mc.birtday,
    prof.profession,
    z.city,
    z.state,
    s.status,
    seeking.seeking,
    interests.interest
    
    
    From my_contacts AS mc
    
    INNER JOIN profession AS prof
    ON mc.prof_id = prof.prof_id
    
    INNER JOIN zip_code AS z
    ON mc.zip_code = z.zip_code
    
    INNER JOIN status AS s
    ON mc.status_id = s.status_id
   
    
    INNER JOIN contact_interest
    ON mc.contact_id = contact_interest.contact_id
    
    INNER JOIN interests
    ON contact_interest.interest_id = interests.interest_id
    
   -- SELECT*
    --FROM my-contacts AS mc
    
    INNER JOIN contact_seeking
    ON mc.contact_id = contact_seeking.contact_id
    
    INNER JOIN seeking
    ON contact_seeking.seeking_id = seeking.seeking_id;
    

END;